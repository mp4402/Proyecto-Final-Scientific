{\rtf1\ansi\ansicpg1252\cocoartf2622
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //CODIGO PRINCIPAL\
pkg load io\
%leer fechas\
excelDates = xlsread('datos.xlsx','B1:B138');\
nanElements = isnan(excelDates); %indices donde estan los valores NaN\
excelDates(nanElements) = []; %eliminar las casillas\
matlabDates = 693960 + excelDates;\
excelDates = datestr(matlabDates,2);  \
\
\
%leer horas\
excelhoras = xlsread('datos.xlsx','D1:D138');\
nanElements = isnan(excelhoras);\
excelhoras(nanElements) = [];\
exhoras = excelhoras;\
excelhoras = datestr(excelhoras,'HH:MM');\
\
%leer mg/dlmread\
excelglucosa = xlsread('datos.xlsx','C1:C138');\
nanElements = isnan(excelglucosa);\
excelglucosa(nanElements) = [];\
\
%leer condicion \
[n, condiciones] = xlsread('datos.xlsx','E3:E138');\
printf('\\n\\n\\n\\n\\n');\
%p = condiciones(136,1);\
%a=condiciones\{136,1\};\
\
%______ Pregunta: Primera dosis de mediacemento ________________\
hora_mediacamento = inputdlg ("Ingrese la hora en la que tom
\f1 \uc0\u65533 
\f0  su primera dosis de medicamento (HH:MM)");\
hora_mediacamento = hora_mediacamento\{1,1\};\
tiempo = strsplit(hora_mediacamento,":");\
horas = str2double(tiempo\{1,1\});\
hora_entera_medicamento = horas;\
minutos = str2double(tiempo\{1,2\})/60;\
hora_decimal_medicamento = minutos;\
hora_mediacamento = (horas+minutos)/24;\
hora_total_mediacmento = hora_mediacamento*24;\
%__________________   Fin Pregunta    __________________________\
\
%_______ C
\f1 \uc0\u65533 
\f0 lculo numero de horas (hora glocosa menos toma de medicamento) ________________\
tiempo =[];\
temporal = 0.00;\
for i=1: length(excelhoras);\
  temporal = (exhoras(i) - hora_mediacamento);\
  if temporal <0;\
  temporal2 = datestr(exhoras(i),'HH:MM');\
  temporal2 = strsplit(temporal2,":");\
  h2 = str2num(temporal2\{1,1\});\
  m2 = str2num(temporal2\{1,2\});\
  \
  temporal = datestr(hora_mediacamento,'HH:MM');\
  temporal = strsplit(temporal,":");\
  h = str2num(temporal\{1,1\});\
  m = str2num(temporal\{1,2\});\
  \
  h = h2-h;\
  m = (m2-m)/60; \
  temporal = h+m;\
  tiempo(i) = temporal;\
  else\
  temporal = datestr(temporal,'HH:MM');\
  temporal = strsplit(temporal,":");\
  h = str2num(temporal\{1,1\});\
  m = str2num(temporal\{1,2\})/60;\
  temporal = h + m;\
  tiempo(i) = temporal;\
  endif\
endfor\
%________________________________ Fin C
\f1 \uc0\u65533 
\f0 lculo ____________________________________________\
\
\
\
%____________________ Pregunta: Rango de analisis __________________________________________________\
fecha_inicio = inputdlg ("Ingrese fecha de inicio (mm/dd/yy): ");\
fecha_inicio = datenum(fecha_inicio\{1,1\}, "mm/dd/yy");\
while(fecha_inicio < matlabDates(1));\
  fecha_inicio = inputdlg ("Ingrese otra vez la fecha de inicio (mm/dd/yy): ");\
  fecha_inicio = datenum(fecha_inicio\{1,1\}, "mm/dd/yy");\
endwhile\
fecha_final = inputdlg ("Ingrese fecha final (mm/dd/yy): ");\
fecha_final = datenum(fecha_final\{1,1\}, "mm/dd/yy");\
while(fecha_final>matlabDates(length(matlabDates)));\
  fecha_final = inputdlg ("Ingrese otra vez la fecha final (mm/dd/yy): ");\
  fecha_final = datenum(fecha_final\{1,1\}, "mm/dd/yy");\
endwhile\
      \
x = 1;\
indices=[];\
for i=1:length(excelDates);\
   if matlabDates(i) >= fecha_inicio && matlabDates(i) <= fecha_final;\
     indices(x) = i;\
     x = x+1;\
   endif\
 endfor\
 random = indices;\
 \
 if length(indices) > 10;\
    random = [indices(1): 1: indices(x-1)];\
    random = random(randperm (10,10));\
 endif\
 \
 for i=1: length(indices)\
   datestr(matlabDates(indices(i)))\
 endfor\
%__________________________ Fin Pregunta ____________________________________________________________\
\
%__________________________ Menu de opciones _________________________________________________________\
\
randomSort=sort(random);\
tiempoSort=[];\
glucosaSort=[];\
tiempoSortGrafica = [];\
glucosaSortGrafica= [];\
for i=1:length(randomSort);\
  tiempoSort(i)=tiempo(randomSort(i));\
  tiempoSortGrafica(i)=tiempo(randomSort(i));\
  glucosaSort(i)=excelglucosa(randomSort(i),1);\
  glucosaSortGrafica(i) = excelglucosa(randomSort(i),1);\
endfor\
\
for i=1:length(tiempoSort);\
  Nindices = find(tiempoSortGrafica == tiempoSort(i));\
  if length(Nindices>1)\
    for k=2:length(Nindices);\
      tiempoSortGrafica(Nindices(k)) = [];\
      glucosaSortGrafica(Nindices(k)) = [];\
    endfor\
  endif\
endfor\
%tiempoSort\
tiempoSortGrafica;\
%glucosaSort\
glucosaSortGrafica;\
while 1;\
  choice = menu('Seleccione una opcion: ','Gr
\f1 \uc0\u65533 
\f0 ficas','Tabla de metabolizaci
\f1 \uc0\u65533 
\f0 n de glucosa','Aceleraci
\f1 \uc0\u65533 
\f0 n metab
\f1 \uc0\u65533 
\f0 lica de glucosa','Glucosa Promedio','Glucosa-Meta','Tendencia','Resumen Estadistico','Salir');\
  clf\
  clc\
  switch choice\
    case 1  \
      %Funcion graficas\
      choice2 = menu('Elecci
\f1 \uc0\u65533 
\f0 n de graficas','Puntos','Polinomio')\
      switch choice2\
        case 1\
          %Grafica por puntos\
          graficas(tiempoSortGrafica,glucosaSortGrafica,1);\
        case 2\
          %Grafica por polinomio\
          Yinter = graficas(tiempoSortGrafica,glucosaSortGrafica,2);\
          grid on\
        case 3\
           otherwise\
      endswitch\
    case 2\
      %Tabla de metabolizacion de glucos\
      derivada = primeraDerivada(tiempoSortGrafica,glucosaSortGrafica);\
      fprintf('   Fecha     Razon de Cambio  Condicion\\n');\
      for i=1:length(derivada)\
        if(derivada(i) < 0)\
          if(derivada(i)<=-10)\
            fprintf('%s     %4.5f        %4s\\n',datestr(matlabDates(randomSort(i))),derivada(i),condiciones\{randomSort(i),1\});\
          else\
            fprintf('%s     %4.5f         %4s\\n',datestr(matlabDates(randomSort(i))),derivada(i),condiciones\{randomSort(i),1\});\
          endif\
        else\
          if(derivada(i)>=10)\
            fprintf('%s     +%4.5f        %4s\\n',datestr(matlabDates(randomSort(i))),derivada(i),condiciones\{randomSort(i),1\});\
          else\
            fprintf('%s     +%4.5f         %4s\\n',datestr(matlabDates(randomSort(i))),derivada(i),condiciones\{randomSort(i),1\});\
          endif\
        endif\
      endfor\
      \
    case 3\
      %Aceleracion metabolica\
      acelMeta=segundaDerivada(tiempoSortGrafica,glucosaSortGrafica);\
      maxAcelMeta=max(acelMeta);\
      minAcelMeta=min(acelMeta);\
      fprintf('La aceleraci?n maxima es: %4.5f\\nLa aceleraci?n minima es: %4.5f\\n\\n',maxAcelMeta,minAcelMeta);\
    case 4\
      promGluco=(1/(max(tiempoSortGrafica)-min(tiempoSortGrafica)))*integral(tiempoSortGrafica,glucosaSortGrafica);\
      printf('Glucosa promedio: %4.5f\\n',promGluco);\
      %Glucosa Promedio\
    case 5\
      %Glucosa-Meta\
      nuevas_horas =[];\
      glucosa_meta = inputdlg("Ingrese el nievl del glucosa: ");\
      glucosa_meta = str2num(glucosa_meta\{1,1\});\
      horas_aproximadas = encontrarGlucosa(tiempoSortGrafica,glucosaSortGrafica,glucosa_meta);\
      for i=1:length(horas_aproximadas);\
        if horas_aproximadas(i) > 0\
         entera_aprox = floor(horas_aproximadas(i));\
         entera_aprox = floor(horas_aproximadas(i)) + floor(hora_entera_medicamento);\
         decimal_aprox = horas_aproximadas(i) - floor(horas_aproximadas(i));\
         decimal_aprox = (decimal_aprox + hora_decimal_medicamento)*60;\
         fprintf('%0.0f:%0.0f\\n',entera_aprox,decimal_aprox);\
        else\
           hora_aprox =  horas_aproximadas(i) + hora_total_mediacmento;\
           entera_aprox = floor(hora_aprox);\
           decimal_aprox = (hora_aprox - entera_aprox)*60;\
           fprintf('%0.0f:%0.0f\\n',entera_aprox,decimal_aprox);\
        endif\
      endfor\
    case 6\
      clf\
      puntos=regLineal(tiempoSort,glucosaSort); \
      fprintf('La ecuaci
\f1 \uc0\u65533 
\f0 n es: y=%4.5f*x+%4.5f\\nEl r2 es: %4.5f\\n',puntos(1),puntos(2),puntos(3));    \
      %Tendencia\
    case 7\
      %Resumen Estadistico\
      # MEDIA DEL RANGO DE FECHAS\
      MEDIA = mean(excelglucosa(indices,1))\
      MEDIANA = median(excelglucosa(indices,1))\
      MODA = mode(excelglucosa(indices,1))\
      Glucosa_Maxima = max(excelglucosa(indices,1))\
      Glucosa_Minima = min(excelglucosa(indices,1))\
      Desviasion_estandar = std(excelglucosa(indices,1))\
    case 8\
      break\
    otherwise\
\
  endswitch\
endwhile\
\
%__________________________ Fin menu de opciones ________________________________________________________________________________________________________________\
//CODIGO DE GRAFICAS.\
function Yinter = graficas (x,y,tipo);\
  if tipo ==1;\
    plot(x,y,'*')\
    xlabel('Tiempo (Primera dosis - hora de medicion)');\
    ylabel('Nivel de glucosa (mg,dL)');\
    title('Glucosa - Tiempo');\
    grid on;\
  else\
        n = length(x); % La lingitud del vector x nos da el numero de coeficientes y terminos para el polinomio interpolante de newton.\
        a(1) = y(1); %Aqui esta encontrando el primer coeficiente del polinomio.\
        for i=1:n-1;\
          divDIF(i,1) = (y(i+1)-y(i))/(x(i+1)-x(i));\
        endfor\
        %de la linea 7 a la 9 se trabaja la primera diferencia divididas\
        for j=2:n-1;\
          for i=1: n-j;\
            divDIF(i,j) = (divDIF(i+1,j-1)-divDIF(i,j-1))/(x(j+i)-x(i));\
          endfor\
        endfor\
        %De la linea 12 a la 16 se calculan las diferencias dividdidas de orden superior\
        for j=2:n;\
        a(j) = divDIF(1,j-1); % Aqui se asignan las diferencias divididas a los coeficientes restantes\
      endfor\
      \
      Xint = x; \
      len = length(Xint); %Se obtiene el tamao del vector para saber donde finalizar el ciclo\
      for i=1:len;\
        Yinter(i) = a(1); \
        xn =1;\
        for k=2:n;\
          xn = xn*(Xint(i)-x(k-1));\
          Yinter(i) = Yinter(i) + a(k)*xn; %Se utiliza un vector para alamecnar todas las imagenes\
        endfor\
      endfor\
      plot(Xint, Yinter, 'g')\
      xlabel('Tiempo (Primera dosis - hora de medicion)');\
      ylabel('Nivel de glucosa (mg,dL)');\
      title('Curva aproximada (Polinomio Interpolante de Newton)');\
  endif\
endfunction\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
//CODIGO DE GLUCOSA-META\
function aprox = encontrarGlucosa (x,y,glucosa_meta);\
  n = length(x); % La lingitud del vector x nos da el numero de coeficientes y terminos para el polinomio interpolante de newton.\
  a(1) = y(1); %Aqui esta encontrando el primer coeficiente del polinomio.\
  for i=1:n-1;\
    divDIF(i,1) = (y(i+1)-y(i))/(x(i+1)-x(i));\
  endfor\
  %de la linea 7 a la 9 se trabaja la primera diferencia divididas\
  for j=2:n-1;\
    for i=1: n-j;\
      divDIF(i,j) = (divDIF(i+1,j-1)-divDIF(i,j-1))/(x(j+i)-x(i));\
    endfor\
  endfor\
  %De la linea 12 a la 16 se calculan las diferencias dividdidas de orden superior\
  for j=2:n;\
  a(j) = divDIF(1,j-1); % Aqui se asignan las diferencias divididas a los coeficientes restantes\
endfor\
intersectos = [];\
aprox = [];\
repetidos = [];\
for m=1: length(x)-1;\
    %si el siguiente numero es mayor al actual. el minimo va a ser el actual y el maximo el siguiente\
    if(x(m+1)> x(m))\
       Xint = x(m):0.05:x(m+1);\
    else\
    %si el siguiente numero es menor al actual, el minimo va a ser el siguiente y el maximo va a ser el actual \
    %se hace un flip\
       Xint = flip(x(m+1):0.05:x(m)); \
    endif\
    Yinter = [];\
    len = length(Xint); \
    for i=1:len;\
      Yinter(i) = a(1); \
      xn =1;\
      for k=2:n;\
        xn = xn*(Xint(i)-x(k-1));\
        Yinter(i) = Yinter(i) + a(k)*xn; \
      endfor\
    endfor\
    menores = find(Yinter <= (glucosa_meta+2)); \
    mayores = find(Yinter >= (glucosa_meta-2)); \
    intersectos = intersect(menores,mayores);\
    if length(intersectos)>0;\
      for t=1:length(intersectos);\
          aprox = [aprox,Xint(intersectos(t))];\
      endfor\
    endif\
    %fprintf("Iteracion %0.0f\\n",m)\
    %Xint\
    %Yinter\
endfor\
\
imagen_aprox = [];\
for i=1: length(aprox)\
  aprox(i) = str2num(sprintf('%0.4f',aprox(i)));\
endfor\
for i=1: length(aprox)\
  imagen_aprox(i) = str2num(sprintf('%0.4f',aprox(i)));\
endfor\
\
indice_N = [];\
for i=1: length(imagen_aprox)\
  indice_N = find(aprox == imagen_aprox(i));\
  if length(indice_N) >1\
    if length(indice_N) == 2\
      aprox(indice_N(2)) = [];\
    else\
      for k = 2: length(indice_N)-1\
        aprox(indice_N(k)) = [];\
      endfor\
    endif\
  endif\
endfor\
\
\
aprox;\
endfunction\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
//INTEGRACI\'d3N POR MEDIO DE TRAPECIO\
%Se utilizar el mtodo del trapecio con intervalos irregulares\
function I=integral(x,y);\
  n=length(x);\
  suma=0;\
  for i=1:n-1;\
    suma=suma+(y(i)+y(i+1))*(x(i+1)-x(i));\
  endfor\
  I=0.5*suma;\
endfunction\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
//DIFERENCIACI\'d3N NUMERICA A TRAVEZ DE DIFERENCIAS FINITAS\
function dx = primeraDerivada(x,y)\
  %calcula la derivada de una funcion dada por un conjunto de puntos.\
  %Se utilizara la derivacion numerica por diferencias finitas.\
  % x es un vector que almacena las coordenadas x de los puntos\
  % y es un vector que almacena las coordenadas y de los puntos \
  % La variable de salida es un vector dx\
  n = length(x);\
  dx(1) = (y(2) - y(1))/(x(2)-x(1)); %diferencia finita hacia adelante\
  for i=2: n-1;\
    dx(i) = (y(i+1)-y(i-1))/(x(i+1)-x(i-1)); %diferencia finita centrada\
  endfor\
  dx(n) = (y(n)-y(n-1))/(x(n)-x(n-1)); %Diferencia finita hacia atras\
 endfunction\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
// REGRESION LINEAL \
function puntos=regLineal(x,y);\
  n=length(x);\
  x=x(:); y=y(:);\
  sx=sum(x); sy=sum(y); %suma de las columnas de "x" y de "y"\
  sx2=sum(x.*x); sxy=sum(x.*y); sy2=sum(y.*y);\
  puntos(1)=(n*sxy-sx*sy)/(n*sx2-sx^2);\
  puntos(2)=sy/n-puntos(1)*sx/n;\
  puntos(3)=((n*sxy-sx*sy)/sqrt(n*sx2-sx^2)/sqrt(n*sy2-sy^2))^2;\
  xp=linspace(min(x),max(x),2);\
  yp=puntos(1)*xp+puntos(2);\
  plot(x,y,'*',xp,yp);\
  grid on;\
endfunction\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
// SEGUNDA DERIVADA POR DIFERENCIACI\'d3N NUMERICA POR DIFERENCIAS FINITAS\
unction d2x=segundaDerivada(x,y);\
  n=length(x);\
  d2x(1)=(y(1)-2*y(2)+y(3))/((x(2)-x(1))^2); %Segunda derivada, dif. finitas hacia adelante\
  for i=2:n-1; \
    d2x(i)=(y(i-1)-2*y(i)+y(i+1))/((x(i)-x(i-1))^2);\
  endfor\
  d2x(n)=(y(n-2)-2*y(n-1)+y(n))/((x(n)-x(n-1))^2);\
endfunction\
\
}